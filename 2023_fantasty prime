#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <utility>
#include <set>

using namespace std;//이름공간 선언

int first_num[] = {2,3,5,7};//첫 자리수
int prime_num[] = {1,3,7,9};//두번째이후 숫자
const int maxi = 9000;
bool chk_prime[maxi];//소수 여부
vector<int> prime;//소수를 담는 배열
int n;//자릿수

//9000까지의 소수구하기
void eratos(){
    memset(chk_prime,true,sizeof(chk_prime));//초기화
    int root_maxi = ceil(pow(maxi,0.5));
    //에라토테네스의 체
    for(int i=3;i<root_maxi;i+=2){
        //소수인 경우
        if(chk_prime[i]==true){
            for(int j=i*i;j<maxi;j+=i){
                chk_prime[j] = false;//소수가 아님
            }
        }
    }
    //소수담기
    for(int i=3;i<maxi;i+=2){
        if(chk_prime[i]==true){
            prime.push_back(i);
        }
    }
}

//소수인가?
bool is_prime(int m){
    for(int k=0;k<prime.size();k++){
        //나누어 떨어지는것이 있으면 소수가 아님
        if(m%prime[k]==0 && prime[k]<m){
            return false;
        }
    }
    return true;
}

//신기한 소수 구하기
void fantasty_prime(int x,int idx){
    //목표 자릿수 도달
    if(idx==n){
        cout<<x<<"\n";
        return;
    }
    //자릿수 붙이기
    for(int j : prime_num){
        int next_num = 10*x + j;//다음숫자
        //소수인것만 다음수로 넘어감
        if(is_prime(next_num)==true){
            fantasty_prime(next_num,idx+1);
        }
    }
}

int main(){
    //빠른 입출력
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin>>n;
    eratos();//9000까지의 소수
    //첫자리는 2,3,5,7
    for(int i : first_num){
        fantasty_prime(i,1);//첫 숫자, 자릿수
    }
    return 0;
}
